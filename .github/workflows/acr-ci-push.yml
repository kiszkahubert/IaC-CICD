name: Image Build and Push to ACR

on:
  push:
    branches:
      - master
      - main
  workflow_dispatch:

env:
  REGISTRY_NAME: ${{ secrets.ACR_REGISTRY }}
  IMAGE_NAME: test

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Enable containerd image store
        run: |
          sudo mkdir -p /etc/docker
          echo '{ "features": { "containerd-snapshotter": true } }' | sudo tee /etc/docker/daemon.json
          sudo systemctl restart docker

      - name: Buildx setup
        uses: docker/setup-buildx-action@v3
        with:
          driver: docker

      - name: Log in to ACR
        uses: azure/docker-login@v1
        with:
          login-server: ${{ env.REGISTRY_NAME }}.azurecr.io
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build Docker image for scanning
        uses: docker/build-push-action@v5
        with:
          context: .    
          file: ./Dockerfile
          push: false
          load: true
          tags: scan-image:latest
          cache-from: type=gha

      - name: Run Trivy scan
        uses: aquasecurity/trivy-action@master
        with:
          skip-dirs: node_modules,/usr/local/lib/node_modules/npm/node_modules/cross-spawn
          image-ref: scan-image:latest
          ignore-unfixed: true
          exit-code: '1'
          severity: 'HIGH,CRITICAL'
          vuln-type: os,library

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max